version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: config-server-postgres
    environment:
      POSTGRES_DB: configdb
      POSTGRES_USER: configuser
      POSTGRES_PASSWORD: configpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config-server/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - config-network
    restart: unless-stopped

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: config-server-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - config-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: config-server-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - config-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: config-server-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - config-network
    restart: unless-stopped

  # Aplicação Config Server
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: comprae-config-server
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8080:8080"
    environment:
      # Configurações do banco de dados
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/configdb
      SPRING_DATASOURCE_USERNAME: configuser
      SPRING_DATASOURCE_PASSWORD: configpass
      
      # Configurações do Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      
      # Configurações do Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # Configurações de segurança
      USERNAME: admin
      PASSWORD: admin123
      
      # Configurações de ambiente
      SPRING_PROFILES_ACTIVE: docker
      
      # Configurações de JVM
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC"
    networks:
      - config-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus para monitoramento (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: config-server-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - config-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: config-server-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - config-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  config-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
